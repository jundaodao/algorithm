package 链表;

/**
 * 将单链表划分成左边小中间相等后边大的形式,同样，左右内部可以不区分大小
 *  思路：
 *  笔试：将 node放入数组中，然后做 partition,荷兰国旗了，然后再串起来，就完事了，空间复杂度 O(n)
 *
 *  面试：空间复杂度 O(1)
 *  思路 2: 搞 6 个变量，
 *  1） 小于指定数的头 sh , 小于指定数的尾 st
 *  2)  等于指定数的头 eh, 等于指定数的尾 et
 *  3) 大于指定数的头  bh, 大于指定数的尾 bt
 *
 *  当发现小于n时候，sh,st =arr[i] ,当再次发现小于n的时候,st=arr[i], sh->st 指向
 *  当发现大于n时候，bh,bt =arr[i],当再次发现大于n的时候，bt=arr[i],bh->bt 指向
 *  当发现等于n时候，eh,et =arr[i],当再次发现等于n的时候，et=arr[i]， eh->et 指向
 *
 *  最后将这三个链表头尾相连，就成了左边都是比 n 小的，有边都是比 n大的，中间都是 n
 *  并且这么做就只有 6 个变量，空间复杂度 O(1)
 */
public class b4将单链表划分成左边小中间相等后边大的形式 {
}
